theory Graph_Adaptor
  imports
    "../Directed_Graphs/Dgraph"
    "../Undirected_Graphs/Graph_Tbd"
    "../Directed_Graphs/Shortest_Dpath"
    "../Undirected_Graphs/Shortest_Path"
begin

abbreviation shortest_path :: "'a graph \<Rightarrow> 'a path \<Rightarrow> 'a \<Rightarrow> 'a \<Rightarrow> bool" where
  "shortest_path G p u v \<equiv> walk_betw G u p v \<and> path_length p = dist G u v"

abbreviation shortest_dpath :: "'a dgraph \<Rightarrow> 'a dpath \<Rightarrow> 'a \<Rightarrow> 'a \<Rightarrow> bool" where
  "shortest_dpath G p u v \<equiv> dpath_bet G p u v \<and> dpath_length p = Shortest_Dpath.dist G u v"

context graph
begin

definition dEs :: "'a dgraph" where
  "dEs \<equiv> {(u, v). {u, v} \<in> G}"

lemma dEs_symmetric:
  shows "(u, v) \<in> dEs \<longleftrightarrow> (v, u) \<in> dEs"
  by (simp add: dEs_def insert_commute)

lemma path_iff_dpath:
  shows "path G p \<longleftrightarrow> dpath dEs p"
  sorry

lemma walk_betw_iff_dpath_bet:
  shows "walk_betw G u p v \<longleftrightarrow> dpath_bet dEs p u v"
  unfolding walk_betw_def dpath_bet_def
  by (auto simp add: path_iff_dpath)

lemma path_length_eq_dpath_length:
  shows "path_length p = dpath_length p"
  by (simp add: edges_of_path_length edges_of_dpath_length)

lemma reachable_iff_reachable:
  shows "reachable G u v \<longleftrightarrow> Noschinski_to_DDFS.reachable dEs u v"
  unfolding reachable_def reachable_iff_dpath_bet
  by (simp add: walk_betw_iff_dpath_bet)

lemma dist_eq_dist:
  shows "dist G u v = Shortest_Dpath.dist dEs u v"
  unfolding dist_def Shortest_Dpath.dist_def
  by (simp add: walk_betw_iff_dpath_bet path_length_eq_dpath_length)

lemma shortest_path_iff_shortest_dpath:
  shows "shortest_path G p u v = shortest_dpath dEs p u v"
  by (simp add: walk_betw_iff_dpath_bet path_length_eq_dpath_length dist_eq_dist)

end

end